<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Mr.Kranch Mobile</title>
    <style>
        * {
            box-sizing: border-box;
            touch-action: manipulation;
            margin: 0;
            padding: 0;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: Arial, sans-serif;
            background: #2c3e50;
            color: white;
            line-height: 1.4;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .game-container {
            padding: 10px;
            max-width: 600px;
            margin: 0 auto;
            width: 100%;
            flex-grow: 1;
        }

        h1 {
            font-size: 1.2rem;
            text-align: center;
            margin: 0.5rem 0;
            color: #ecf0f1;
            line-height: 1.3;
        }

        .status-bar {
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
            margin: 0.8rem 0;
            padding: 0 5px;
        }

        .boss-container {
            background: #34495e;
            border-radius: 10px;
            padding: 1rem;
            margin: 1rem 0;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .player-cards {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 8px;
            margin: 1rem 0;
        }

        .card {
            background: #3498db;
            padding: 0.8rem;
            border-radius: 8px;
            text-align: center;
            min-height: 100px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            transition: transform 0.1s;
        }

        .card:active {
            transform: scale(0.98);
        }

        .card.disabled {
            background: #7f8c8d !important;
            opacity: 0.7;
        }

        .card.rare { background: #9b59b6; }
        .card.epic { background: #e67e22; }

        .card h3 {
            font-size: 0.95rem;
            margin-bottom: 0.3rem;
            word-break: break-word;
        }

        .game-log {
            height: 120px;
            overflow-y: auto;
            background: rgba(0,0,0,0.3);
            border-radius: 8px;
            padding: 0.8rem;
            margin: 1rem 0;
            font-size: 0.85rem;
        }

        button {
            width: 100%;
            padding: 12px;
            background: #27ae60;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            margin-top: 0.5rem;
            cursor: pointer;
        }

        @media (min-width: 480px) {
            .player-cards {
                grid-template-columns: repeat(3, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>–ë–∏—Ç–≤–∞ –∏–≥—Ä—É—à–µ–∫ Mr.Kranch üß∏ vs —Å–æ–±–∞–∫–∏-—É–ª–∏—Ç–æ–∂–∏—Ç–µ–ª–∏ üê∂</h1>
        
        <div class="status-bar">
            <div>üî∏ –£—Ä–æ–≤–µ–Ω—å: <span id="level">1</span></div>
            <div>üß∏ –°–æ–±—Ä–∞–Ω–æ: <span id="collected">5</span>/15</div>
        </div>
        
        <div class="boss-container">
            <h2>–ü–∏—Ç–æ–º–µ—Ü: <span id="boss-name">–û–≤—á–∞—Ä–∫–∞</span></h2>
            <div>‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ: <span id="boss-health">100</span></div>
            <div>‚ö° –ê—Ç–∞–∫–∞: <span id="boss-attack">15</span></div>
        </div>

        <div class="player-cards" id="cards-container"></div>
        
        <div class="game-log" id="game-log"></div>
        
        <button onclick="resetGame()">üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
    </div>

    <script>
        // –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const allCards = [
            { name: '–•–∞–º–µ–ª–µ–æ–Ω', attack: 8, health: 25, rarity: 'common' },
            { name: '–°–ª–æ–Ω', attack: 6, health: 20, rarity: 'common' },
            { name: '–ì–∞–Ω—Ç–µ–ª—å', attack: 12, health: 15, rarity: 'rare' },
            { name: '–ú—è—á', attack: 4, health: 30, rarity: 'rare' },
            { name: '–ê—Ä–±—É–∑', attack: 10, health: 40, rarity: 'epic' },
            { name: '–°–æ–≤–∞', attack: 15, health: 18, rarity: 'epic' },
            { name: '–ü—Ç–µ—Ä–æ–∑–∞–≤—Ä', attack: 20, health: 50, rarity: 'epic' },
            { name: '–ú—ã—à–∫–∞', attack: 9, health: 25, rarity: 'rare' },
            { name: '–õ–∞–º–∞', attack: 7, health: 35, rarity: 'common' },
            { name: '–†—É–ª—å–∫–∞', attack: 10, health: 30, rarity: 'rare' },
            { name: '–õ–æ—Å–æ—Å—å', attack: 14, health: 22, rarity: 'epic' },
            { name: '–ê–≤–æ–∫–∞–¥–æ', attack: 5, health: 40, rarity: 'common' },
            { name: '–°–æ–±–∞—á–∫–∞', attack: 8, health: 28, rarity: 'rare' },
            { name: '–ö–æ–ª—å—Ü–æ', attack: 18, health: 15, rarity: 'epic' },
            { name: '–û—Å–ª–∏–∫', attack: 12, health: 35, rarity: 'common' }
        ].map(c => ({
            ...c,
            name: c.name + ' MrKranch',
            maxHealth: c.health
        }));

        const bosses = [
            { name: '–û–≤—á–∞—Ä–∫–∞', health: 100, attack: 10 },
            { name: '–î–∞–ª–º–∞—Ç–∏–Ω', health: 150, attack: 15 },
            { name: '–ö–∞–Ω–µ –ö–æ—Ä—Å–æ', health: 200, attack: 20 }
        ];

        // –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let gameState = {
            level: 1,
            boss: null,
            cards: [],
            collected: []
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        function initGame() {
            gameState = {
                level: 1,
                boss: JSON.parse(JSON.stringify(bosses[0])),
                collected: shuffle([...allCards]).slice(0,5)
                    .map(c => ({...c, health: c.maxHealth})),
                cards: []
            };
            gameState.cards = gameState.collected.map(c => ({...c}));
            updateGame();
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        function safeUpdate() {
            setTimeout(updateGame, 50);
        }

        function updateGame() {
            try {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                document.getElementById('level').textContent = gameState.level;
                document.getElementById('boss-name').textContent = gameState.boss.name;
                document.getElementById('boss-health').textContent = gameState.boss.health;
                document.getElementById('boss-attack').textContent = gameState.boss.attack;
                document.getElementById('collected').textContent = gameState.collected.length;

                // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã
                const container = document.getElementById('cards-container');
                container.innerHTML = '';
                
                gameState.cards.forEach((card, index) => {
                    const cardEl = document.createElement('div');
                    cardEl.className = `card ${card.rarity}${
                        card.health <= 0 ? ' disabled' : ''
                    }`;
                    cardEl.innerHTML = `
                        <h3>${card.name}</h3>
                        <p>‚öîÔ∏è ${card.attack}</p>
                        <p>‚ù§ ${Math.max(card.health, 0)}</p>
                    `;
                    
                    if(card.health > 0) {
                        cardEl.onclick = () => attack(index);
                        cardEl.ontouchstart = (e) => {
                            e.preventDefault();
                            attack(index);
                        };
                    }
                    
                    container.appendChild(cardEl);
                });

                // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ª–æ–≥–∞
                const log = document.getElementById('game-log');
                log.scrollTop = log.scrollHeight;
            } catch(e) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', e);
            }
        }

        function attack(cardIndex) {
            try {
                const card = gameState.cards[cardIndex];
                if(!card || card.health <= 0) return;

                // –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
                gameState.boss.health -= card.attack;
                addLog(`‚ö° ${card.name} –∞—Ç–∞–∫—É–µ—Ç (${card.attack})`);

                if(gameState.boss.health <= 0) {
                    handleBossDefeat();
                } else {
                    handleBossAttack();
                }
                
                safeUpdate();
            } catch(e) {
                console.error('–û—à–∏–±–∫–∞ –∞—Ç–∞–∫–∏:', e);
            }
        }

        function handleBossDefeat() {
            if(gameState.level === 3) {
                addLog('üéâ –í—Å–µ–º –ø–∏—Ç–æ–º—Ü–∞–º –ø–æ–¥–æ–±—Ä–∞–Ω–∞ –∏–≥—Ä—É—à–∫–∞!');
                return;
            }
            
            addLog(`üèÜ –£—Ä–æ–≤–µ–Ω—å ${gameState.level} –ø—Ä–æ–π–¥–µ–Ω!`);
            gameState.level++;
            gameState.boss = JSON.parse(JSON.stringify(bosses[gameState.level - 1]));
            
            const newCards = shuffle(allCards
                .filter(c => !gameState.collected.some(cc => cc.name === c.name)))
                .slice(0,2)
                .map(c => ({...c}));
                
            gameState.collected.push(...newCards);
            gameState.cards = gameState.collected.map(c => ({...c}));
        }

        function handleBossAttack() {
            const aliveCards = gameState.cards.filter(c => c.health > 0);
            if(aliveCards.length === 0) {
                addLog('üíÄ –í—Å–µ –∏–≥—Ä—É—à–∫–∏ —Å–ª–æ–º–∞–Ω—ã!');
                return;
            }
            
            const target = aliveCards[Math.floor(Math.random() * aliveCards.length)];
            target.health -= gameState.boss.attack;
            
            const messages = [
                `üî• ${target.name} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞!`,
                `üí• ${gameState.boss.name} –∫—É—Å–∞–µ—Ç ${target.name}!`,
                `ü¶¥ ${target.name} —Ç–µ—Ä—è–µ—Ç –∫—É—Å–æ—á–µ–∫!`
            ];
            
            if(target.health <= 0) {
                addLog(`‚ò†Ô∏è ${target.name} —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!`);
                gameState.cards = gameState.cards.filter(c => c.health > 0);
            } else {
                addLog(messages[Math.floor(Math.random() * messages.length)]);
            }
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function addLog(message) {
            const log = document.getElementById('game-log');
            log.innerHTML += `<div>‚ñ∫ ${message}</div>`;
        }

        function shuffle(arr) {
            for(let i = arr.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [arr[i], arr[j]] = [arr[j], arr[i]];
            }
            return arr;
        }

        function resetGame() {
            document.getElementById('game-log').innerHTML = '';
            initGame();
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        document.addEventListener('DOMContentLoaded', () => {
            try {
                initGame();
            } catch(e) {
                console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', e);
                alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã!');
            }
        });
    </script>
</body>
</html>
